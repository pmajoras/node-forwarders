{"version":3,"sources":["implementations/TextLogsWatcher.ts"],"names":[],"mappings":"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","file":"implementations/TextLogsWatcher.js","sourcesContent":["'use strict';\nimport { FSWatcher, readFile, rename, writeFileSync, readFileSync, createReadStream } from 'fs';\nimport * as readline from 'readline';\nimport { dirname, basename } from 'path';\nimport * as mkdirp from 'mkdirp';\nimport { ITextLogsWatcher } from '../interfaces/ITextLogsWatcher';\nimport { EventEmitter } from 'events';\nimport * as Q from 'q';\nimport * as chokidar from 'chokidar';\nimport { ILogMessageContainer } from '../interfaces/ILogMessages';\nimport { config } from '../config';\n\nconst filesReadJsonPath = config.filesToReadObjectPath;\nconst processLoopInSeconds = config.processTimeout;\nconst events = {\n  newMessage: 'NEW_MESSAGE'\n};\n\ninterface ITextLogConfig {\n  path: string;\n}\n\nexport class TextLogsWatcher extends EventEmitter implements ITextLogsWatcher {\n  constructor(config: ITextLogConfig) {\n    super();\n\n    try {\n      let filesToReadString = readFileSync(filesReadJsonPath, 'utf8');\n      this.filesToRead = JSON.parse(filesToReadString);\n      console.log('parsed filestoRead', this.filesToRead);\n      if (!Array.isArray(this.filesToRead)) {\n        this.filesToRead = [];\n      }\n    } catch (err) {\n      console.log('filesReadJsonPath >> err', err);\n      // Here you get the error when the file was not found,\n      // but you also get any other error\n    }\n\n    this.watcher = chokidar.watch(config.path, {});\n    this.watcher\n      .on('add', this.onFileAdded)\n      .on('change', this.onFileChanged);\n    this.processTimer = setInterval(this.process, 1000 * processLoopInSeconds);\n  }\n\n  private isProcessing: Boolean;\n  private processTimer: NodeJS.Timer;\n  private filesToRead: Array<any> = [];\n  private watcher: FSWatcher;\n  private isDisposed: boolean;\n\n  private process = () => {\n    console.log('process');\n    if (!this.isProcessing) {\n      this.isProcessing = true;\n\n      this.processFiles(this.filesToRead.filter((file) => file.hasChanges))\n        .then((messagesContainers) => {\n          console.log('messagesContainers', messagesContainers);\n          if (messagesContainers && messagesContainers.length > 0) {\n            writeFileSync(filesReadJsonPath, JSON.stringify(this.filesToRead));\n            this.emit(events.newMessage, null, messagesContainers);\n          }\n          this.isProcessing = false;\n        });\n    }\n  }\n\n  // TODO: Improve performance and create a class for this method.\n  private processFiles = (filesPaths: Array<any>): Q.IPromise<any> => {\n    let deffered = Q.defer();\n\n    if (Array.isArray(filesPaths) && filesPaths.length > 0) {\n      let currentFileIndex = 0;\n      let currentFileObject = filesPaths[currentFileIndex];\n      let promiseResult: Array<ILogMessageContainer> = [];\n\n      let readFileRecursive = (filePathObject) => {\n        let currentLine = 0;\n        let fileResult = {\n          messages: [],\n          filePath: filePathObject.path\n        };\n        let readLineInterface = readline.createInterface({\n          input: createReadStream(filePathObject.path),\n          output: process.stdout,\n          terminal: false\n        });\n\n        readLineInterface.on('line', (input) => {\n          console.log('line', input);\n          if (currentLine >= filePathObject.line) {\n            console.log('readedLine', input);\n            fileResult.messages.push({ message: input });\n          }\n          currentLine++;\n        });\n\n        readLineInterface.on('close', () => {\n          filePathObject.line = currentLine;\n          filePathObject.hasChanges = false;\n          promiseResult.push(fileResult);\n          currentFileIndex++;\n\n          if (filesPaths.length > currentFileIndex) {\n            readFileRecursive(filesPaths[currentFileIndex]);\n          } else {\n            deffered.resolve(promiseResult);\n          }\n        });\n      };\n\n      readFileRecursive(currentFileObject);\n    } else {\n      return Q.resolve([]);\n    }\n\n    return deffered.promise;\n  }\n\n  addNewMessagesListener(listener: Function) {\n    this.addListener(events.newMessage, listener);\n  }\n\n  removeNewMessagesListener(listener: Function) {\n    this.removeListener(events.newMessage, listener);\n  }\n\n  onFileAdded = (path: string) => {\n    let index = this.filesToRead.findIndex((fileObject) => fileObject.path === path);\n    if (index === -1) {\n      this.filesToRead.push({ line: 0, path: path, hasChanges: true });\n    } else {\n      this.filesToRead[index].hasChanges = true;\n    }\n    console.log('onFileAdded', this.filesToRead);\n  }\n\n  onFileChanged = (path: string) => {\n    let index = this.filesToRead.findIndex((fileObject) => fileObject.path === path);\n    if (index === -1) {\n      this.filesToRead.push({ line: 0, path: path, hasChanges: true });\n    } else {\n      this.filesToRead[index].hasChanges = true;\n    }\n    console.log('onFileChanged', this.filesToRead);\n  }\n\n  dispose() {\n    if (!this.isDisposed) {\n      this.removeAllListeners();\n\n      if (this.watcher !== null) {\n        this.watcher.close();\n      }\n\n      if (this.processTimer !== null) {\n        this.processTimer.unref();\n      }\n    }\n  }\n}\n"],"sourceRoot":"/source/"}