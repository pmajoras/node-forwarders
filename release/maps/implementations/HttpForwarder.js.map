{"version":3,"sources":["implementations/HttpForwarder.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAGb,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,IAAY,CAAC,WAAM,GAAG,CAAC,CAAA;AAOvB;IACE,uBAAY,MAAW;QACrB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;QAEtB,IAAI,CAAC,MAAM,GAAG;YACZ,GAAG,EAAE,MAAM,CAAC,GAAG;YACf,KAAK,EAAE,MAAM,CAAC,KAAK;SACpB,CAAC;IACJ,CAAC;IAID,+BAAO,GAAP,UAAQ,QAA4B;QAElC,IAAI,KAAK,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;QAEtB,IAAI,IAAI,GAAG;YACT,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK;YACxB,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,OAAO,EAAZ,CAAY,CAAC;SAC/C,CAAC;QAEF,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,UAAC,GAAG,EAAE,YAAY,EAAE,IAAI;YACrF,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACpB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC;IACvB,CAAC;IAED,+BAAO,GAAP;QACE,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACzB,CAAC;IACH,oBAAC;AAAD,CApCA,AAoCC,IAAA;AApCqB,qBAAa,gBAoClC,CAAA","file":"implementations/HttpForwarder.js","sourcesContent":["'use strict';\nimport { IHttpForwarder } from '../interfaces/IHttpForwarder';\nimport { ILogMessage } from '../interfaces/ILogMessages';\nimport * as request from 'request';\nimport * as Q from 'q';\n\ninterface IHttpConfig {\n  url: string;\n  appId: string;\n}\n\nexport abstract class HttpForwarder implements IHttpForwarder {\n  constructor(config: any) {\n    console.log('suber');\n    config = config || {};\n\n    this.config = {\n      url: config.url,\n      appId: config.appId\n    };\n  }\n\n  private config: IHttpConfig;\n\n  forward(messages: Array<ILogMessage>): Q.Promise<any> {\n\n    let defer = Q.defer();\n\n    let body = {\n      appId: this.config.appId,\n      messages: messages.map((mess) => mess.message)\n    };\n\n    request.post({ url: this.config.url, json: true, body: body }, (err, httpResponse, body) => {\n      if (err) {\n        defer.reject(err);\n      } else {\n        defer.resolve(body);\n      }\n    });\n\n    return defer.promise;\n  }\n\n  dispose() {\n    console.log('dispose');\n  }\n}\n"],"sourceRoot":"/source/"}